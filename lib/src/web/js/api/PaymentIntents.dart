@JS()
library api.PaymentIntents;

import "package:js/js.dart";
import "PaymentMethods.dart" show PaymentMethod;
import "shared.dart" show Address, AddressParam;

// Module @stripe/stripe-js
/// The PaymentIntent object.
@anonymous
@JS()
abstract class PaymentIntent {
  /// Unique identifier for the object.
  external String get id;
  external set id(String v);

  /// String representing the object's type. Objects of the same type share the same value.
  external String /*'payment_intent'*/ get object;
  external set object(String /*'payment_intent'*/ v);

  /// Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  external num get amount;
  external set amount(num v);

  /// Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
  external num /*num|Null*/ get canceled_at;
  external set canceled_at(num /*num|Null*/ v);

  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
  external String /*'abandoned'|'automatic'|'duplicate'|'failed_invoice'|'fraudulent'|'requested_by_customer'|'void_invoice'|Null*/ get cancellation_reason;
  external set cancellation_reason(
      String /*'abandoned'|'automatic'|'duplicate'|'failed_invoice'|'fraudulent'|'requested_by_customer'|'void_invoice'|Null*/ v);

  /// Controls when the funds will be captured from the customer's account.
  external String /*'automatic'|'manual'*/ get capture_method;
  external set capture_method(String /*'automatic'|'manual'*/ v);

  /// The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
  /// The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  /// Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment) and learn about how `client_secret` should be handled.
  external String /*String|Null*/ get client_secret;
  external set client_secret(String /*String|Null*/ v);
  external String /*'automatic'|'manual'*/ get confirmation_method;
  external set confirmation_method(String /*'automatic'|'manual'*/ v);

  /// Time at which the object was created. Measured in seconds since the Unix epoch.
  external num get created;
  external set created(num v);

  /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  external String get currency;
  external set currency(String v);

  /// An arbitrary string attached to the object. Often useful for displaying to users.
  external String /*String|Null*/ get description;
  external set description(String /*String|Null*/ v);

  /// The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
  external LastPaymentError /*LastPaymentError|Null*/ get last_payment_error;
  external set last_payment_error(LastPaymentError /*LastPaymentError|Null*/ v);

  /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  external bool get livemode;
  external set livemode(bool v);

  /// If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.
  external NextAction /*NextAction|Null*/ get next_action;
  external set next_action(NextAction /*NextAction|Null*/ v);

  /// ID of the payment method used in this PaymentIntent.
  external String /*String|Null*/ get payment_method;
  external set payment_method(String /*String|Null*/ v);

  /// The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
  external List<String> get payment_method_types;
  external set payment_method_types(List<String> v);

  /// Email address that the receipt for the resulting payment will be sent to.
  external String /*String|Null*/ get receipt_email;
  external set receipt_email(String /*String|Null*/ v);

  /// Indicates that you intend to make future payments with this PaymentIntent's payment method.
  /// If present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.
  /// For more, learn to [save card details after a payment](https://stripe.com/docs/payments/save-after-payment).
  /// Stripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by [SCA](https://stripe.com/docs/strong-customer-authentication), using `off_session` will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect [off-session payments](https://stripe.com/docs/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.
  external String /*'off_session'|'on_session'|Null*/ get setup_future_usage;
  external set setup_future_usage(String /*'off_session'|'on_session'|Null*/ v);

  /// Shipping information for this PaymentIntent.
  external Shipping /*Shipping|Null*/ get shipping;
  external set shipping(Shipping /*Shipping|Null*/ v);

  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  external String /*'canceled'|'processing'|'requires_action'|'requires_capture'|'requires_confirmation'|'requires_payment_method'|'succeeded'*/ get status;
  external set status(
      String /*'canceled'|'processing'|'requires_action'|'requires_capture'|'requires_confirmation'|'requires_payment_method'|'succeeded'*/ v);
  external factory PaymentIntent(
      {String id,
      String /*'payment_intent'*/ object,
      num amount,
      num /*num|Null*/ canceled_at,
      String /*'abandoned'|'automatic'|'duplicate'|'failed_invoice'|'fraudulent'|'requested_by_customer'|'void_invoice'|Null*/ cancellation_reason,
      String /*'automatic'|'manual'*/ capture_method,
      String /*String|Null*/ client_secret,
      String /*'automatic'|'manual'*/ confirmation_method,
      num created,
      String currency,
      String /*String|Null*/ description,
      LastPaymentError /*LastPaymentError|Null*/ last_payment_error,
      bool livemode,
      NextAction /*NextAction|Null*/ next_action,
      String /*String|Null*/ payment_method,
      List<String> payment_method_types,
      String /*String|Null*/ receipt_email,
      String /*'off_session'|'on_session'|Null*/ setup_future_usage,
      Shipping /*Shipping|Null*/ shipping,
      String /*'canceled'|'processing'|'requires_action'|'requires_capture'|'requires_confirmation'|'requires_payment_method'|'succeeded'*/ status});
}

// Module PaymentIntent
/*type CancellationReason =
      | 'abandoned'
      | 'automatic'
      | 'duplicate'
      | 'failed_invoice'
      | 'fraudulent'
      | 'requested_by_customer'
      | 'void_invoice';
*/
/*type CaptureMethod = 'automatic' | 'manual';*/
/*type ConfirmationMethod = 'automatic' | 'manual';*/
@anonymous
@JS()
abstract class LastPaymentError {
  /// For card errors, the ID of the failed charge.
  external String get charge;
  external set charge(String v);

  /// For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
  external String get code;
  external set code(String v);

  /// For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
  external String get decline_code;
  external set decline_code(String v);

  /// A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
  external String get doc_url;
  external set doc_url(String v);

  /// A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
  external String get message;
  external set message(String v);

  /// If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
  external String get param;
  external set param(String v);
  external PaymentMethod get payment_method;
  external set payment_method(PaymentMethod v);

  /// The type of error returned. One of `api_connection_error`, `api_error`, `authentication_error`, `card_error`, `idempotency_error`, `invalid_request_error`, or `rate_limit_error`
  external String /*'api_connection_error'|'api_error'|'authentication_error'|'card_error'|'idempotency_error'|'invalid_request_error'|'rate_limit_error'*/ get type;
  external set type(
      String /*'api_connection_error'|'api_error'|'authentication_error'|'card_error'|'idempotency_error'|'invalid_request_error'|'rate_limit_error'*/ v);
  external factory LastPaymentError(
      {String charge,
      String code,
      String decline_code,
      String doc_url,
      String message,
      String param,
      PaymentMethod payment_method,
      String /*'api_connection_error'|'api_error'|'authentication_error'|'card_error'|'idempotency_error'|'invalid_request_error'|'rate_limit_error'*/ type});
}

// Module LastPaymentError
/*type Type =
        | 'api_connection_error'
        | 'api_error'
        | 'authentication_error'
        | 'card_error'
        | 'idempotency_error'
        | 'invalid_request_error'
        | 'rate_limit_error';
*/

// End module LastPaymentError
@anonymous
@JS()
abstract class NextAction {
  external RedirectToUrl get redirect_to_url;
  external set redirect_to_url(RedirectToUrl v);

  /// Type of the next action to perform, one of `redirect_to_url` or `use_stripe_sdk`.
  external String get type;
  external set type(String v);
  external factory NextAction({RedirectToUrl redirect_to_url, String type});
}

// Module NextAction
@anonymous
@JS()
abstract class RedirectToUrl {
  /// If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  external String /*String|Null*/ get return_url;
  external set return_url(String /*String|Null*/ v);

  /// The URL you must redirect your customer to in order to authenticate the payment.
  external String /*String|Null*/ get url;
  external set url(String /*String|Null*/ v);
  external factory RedirectToUrl(
      {String /*String|Null*/ return_url, String /*String|Null*/ url});
}

// End module NextAction
/*type SetupFutureUsage = 'off_session' | 'on_session';*/
@anonymous
@JS()
abstract class Shipping {
  external Address get address;
  external set address(Address v);

  /// The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
  external String /*String|Null*/ get carrier;
  external set carrier(String /*String|Null*/ v);

  /// Recipient name.
  external String /*String|Null*/ get name;
  external set name(String /*String|Null*/ v);

  /// Recipient phone (including extension).
  external String /*String|Null*/ get phone;
  external set phone(String /*String|Null*/ v);

  /// The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  external String /*String|Null*/ get tracking_number;
  external set tracking_number(String /*String|Null*/ v);
  external factory Shipping(
      {Address address,
      String /*String|Null*/ carrier,
      String /*String|Null*/ name,
      String /*String|Null*/ phone,
      String /*String|Null*/ tracking_number});
}

/*type Status =
      | 'canceled'
      | 'processing'
      | 'requires_action'
      | 'requires_capture'
      | 'requires_confirmation'
      | 'requires_payment_method'
      | 'succeeded';
*/

// End module PaymentIntent
@anonymous
@JS()
abstract class PaymentIntentConfirmParams {
  /// This hash contains details about the Mandate to create
  external dynamic /*JSMap of <String,dynamic>*/ get mandate_data;
  external set mandate_data(dynamic /*JSMap of <String,dynamic>*/ v);

  /// Email address that the receipt for the resulting payment will be sent to.
  external String /*String|''*/ get receipt_email;
  external set receipt_email(String /*String|''*/ v);

  /// The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
  /// If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
  /// This parameter is only used for cards and other redirect-based payment methods.
  external String get return_url;
  external set return_url(String v);

  /// If the PaymentIntent has a `payment_method` and a `customer` or if you're attaching a payment method to the PaymentIntent in this request, you can pass `save_payment_method=true` to save the payment method to the customer. Defaults to `false`.
  /// If the payment method is already saved to a customer, this does nothing. If this type of payment method cannot be saved to a customer, the request will error.
  /// _Note that saving a payment method using this parameter does not guarantee that the payment method can be charged._ To ensure that only payment methods which can be charged are saved to a customer, you can [manually save](https://stripe.com/docs/api/customers/create#create_customer-source) the payment method in response to the [`payment_intent.succeeded` webhook](https://stripe.com/docs/api/events/types#event_types-payment_intent.succeeded).
  external bool get save_payment_method;
  external set save_payment_method(bool v);

  /// Indicates that you intend to make future payments with this PaymentIntent's payment method.
  /// If present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.
  /// Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow.
  /// Stripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by [SCA](https://stripe.com/docs/strong-customer-authentication), using `off_session` will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect [off-session payments](https://stripe.com/docs/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.
  /// If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
  external String /*'off_session'|'on_session'|Null*/ get setup_future_usage;
  external set setup_future_usage(String /*'off_session'|'on_session'|Null*/ v);

  /// Shipping information for this PaymentIntent.
  external PaymentIntentConfirmParams_Shipping /*PaymentIntentConfirmParams_Shipping|Null*/ get shipping;
  external set shipping(
      PaymentIntentConfirmParams_Shipping /*PaymentIntentConfirmParams_Shipping|Null*/ v);
  external factory PaymentIntentConfirmParams(
      {dynamic /*JSMap of <String,dynamic>*/ mandate_data,
      String /*String|''*/ receipt_email,
      String return_url,
      bool save_payment_method,
      String /*'off_session'|'on_session'|Null*/ setup_future_usage,
      PaymentIntentConfirmParams_Shipping /*PaymentIntentConfirmParams_Shipping|Null*/ shipping});
}

// Module PaymentIntentConfirmParams
/*type SetupFutureUsage = 'off_session' | 'on_session';*/
@anonymous
@JS()
abstract class PaymentIntentConfirmParams_Shipping {
  /// Shipping address.
  external AddressParam get address;
  external set address(AddressParam v);

  /// The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
  external String get carrier;
  external set carrier(String v);

  /// Recipient name.
  external String get name;
  external set name(String v);

  /// Recipient phone (including extension).
  external String get phone;
  external set phone(String v);

  /// The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  external String get tracking_number;
  external set tracking_number(String v);
  external factory PaymentIntentConfirmParams_Shipping(
      {AddressParam address,
      String carrier,
      String name,
      String phone,
      String tracking_number});
}

// End module PaymentIntentConfirmParams

// End module @stripe/stripe-js
